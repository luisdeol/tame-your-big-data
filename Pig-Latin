------------------------------ PIG -------------------------------


ratings = LOAD '/data/u.data' as
	(userID: int, movieID: int, rating: int, ratingTime: int);


metadata = LOAD '/data/u.item' USING 
	PigStorage('|') AS (movieID: int, movieTitle: chararray,
			releaseDate: chararray, videoRelease: chararray,
	imdbLink: chararray);


nameLookup = FOREACH metadata GENERATE movieID, movieTitle,
	ToDate(releaseDate, 'dd-MMM-yyyy') AS releaseTime;



ratingsByMovie = GROUP ratings BY movieID;



avgRatings = FOREACH ratingsByMovie GENERATE group as movieID,
	AVG(ratings.rating) AS avgRating;


DESCRIBE ratings;
DESCRIBE ratingsByMovie;
DESCRIBE avgRatings;


fiveStarMovies = FILTER avgRatings BY avgRating > 4.0;

fiveStarsWithData = JOIN fiveStarMovies BY movieID, nameLookup BY movieID;

oldestFiveStarMovies = ORDER fiveStarsWithData BY nameLookup::releaseTime;

DUMP oldestFiveStarMovies;

---------------------------------------------------------------------

Diving Deeper

LOAD STORE DUMP
	STORE ratings INTO 'outRatings' USING PigStorage(',');

- FILTER DISTINCT FOREACH/GENERATE MAPREDUCE STREAM SAMPLE
- JOIN COGROUP GROUP CROSS CUBE
- ORDER RANK LIMIT
- UNION SPLIT



- DIAGNOSTICS

	DESCRIBE
	EXPLAIN 
	ILLUSTRATE


- UDF's
	REGISTER
	DEFINE
	IMPORT


- SOME OTHER FUNCTIONS AND LOADERS

AVG, CONCAT, COUNT, MAX, MIN, SIZE, SUM


	PigStorage
	TextLoader
	JsonLoader
	AvroStorage
	ParquetLoader
	OrcStorage
	HBaseStorage


- Learning more

	Programming Pig


-------------------------------------------------------------

CHALLENGE


ratings = LOAD '/data/u.data' as
	(userID: int, movieID: int, rating: int, ratingTime: int);


metadata = LOAD '/data/u.item' USING 
	PigStorage('|') AS (movieID: int, movieTitle: chararray,
			releaseDate: chararray, videoRelease: chararray,
	imdbLink: chararray);



nameLookup = FOREACH metadata GENERATE movieID, movieTitle,
	ToDate(releaseDate, 'dd-MMM-yyyy') AS releaseTime;



groupedRatings = GROUP ratings BY movieID;


avgRatings = FOREACH groupedRatings GENERATE group AS movieID, AVG(ratings.rating) AS avgRating, COUNT(ratings.rating) AS numRatings;


badMovies = FILTER avgRatings BY avgRating < 2.0;


namedBadMovies = JOIN badMovies BY movieID, nameLookup BY movieID;


finalResults =  FOREACH namedBadMovies GENERATE nameLookup::movieTitle, badMovies::avgRating AS avgRating, badMovies::numRatings AS numRatings;

finalResultsSorted = ORDER finalResults BY numRatings DESC;

DUMP finalResultsSorted;




